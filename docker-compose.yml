services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mailbox-postgres
    environment:
      POSTGRES_DB: mailbox_db
      POSTGRES_USER: mailbox_user
      POSTGRES_PASSWORD: mailbox_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mailbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mailbox_user -d mailbox_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: mailbox-ollama
    ports:
      - "11434:11434"
    environment:
      OLLAMA_MODEL: tinyllama  # Model to auto-pull on startup (faster than phi3)
    volumes:
      - ollama_data:/root/.ollama
      - ./scripts/ollama-entrypoint.sh:/entrypoint.sh:ro
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    networks:
      - mailbox-network
    restart: unless-stopped

  # Python Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mailbox-backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://mailbox_user:mailbox_pass@postgres:5432/mailbox_db
      MAILPIT_HOST: mailpit
      MAILPIT_PORT: 8025
      MAILPIT_SMTP_PORT: 1025
      OLLAMA_HOST: ollama
      OLLAMA_PORT: 11434
      OLLAMA_MODEL: tinyllama
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
    depends_on:
      postgres:
        condition: service_healthy
      mailpit:
        condition: service_started
      ollama:
        condition: service_started
    volumes:
      - ./backend:/app
      - otterwiki_data:/app/otterwiki_data:ro
      - chroma_data:/app/chroma_db
    networks:
      - mailbox-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Material Dashboard Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mailbox-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mailbox-network

  # MailPit - Local Mail Server
  mailpit:
    image: axllent/mailpit:latest
    container_name: mailbox-mailpit
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    environment:
      MP_MAX_MESSAGES: 5000
      MP_DATABASE: /data/mailpit.db
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    volumes:
      - mailpit_data:/data
    networks:
      - mailbox-network

  # OtterWiki - Internal Company Wiki
  otterwiki:
    image: redimp/otterwiki:latest
    container_name: mailbox-otterwiki
    ports:
      - "9000:80"  # Web UI on port 9000
    environment:
      SITE_NAME: "IntelliSwarm Company Wiki"
      SITE_LOGO: "/static/img/logo.png"
    volumes:
      - otterwiki_data:/app-data
      - ./generate_wiki_pages.py:/docker-entrypoint-initdb.d/generate_wiki_pages.py:ro
      - ./scripts/wiki-init.sh:/docker-entrypoint-initdb.d/wiki-init.sh:ro
    networks:
      - mailbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Email Seeder - Loads and sends emails from Kaggle dataset
  email-seeder:
    build:
      context: ./email-seeder
      dockerfile: Dockerfile
    container_name: mailbox-seeder
    environment:
      MAILPIT_SMTP_HOST: mailpit
      MAILPIT_SMTP_PORT: 1025
      DATASET_PATH: /dataset/phishing_legit_dataset_KD_10000.csv
      NUM_EMAILS: 10000
    volumes:
      - ./email-seeder/dataset:/dataset
    depends_on:
      - mailpit
    networks:
      - mailbox-network
    command: python seed_emails.py

  # Email Fetcher - Clears DB and auto-fetches emails on startup
  email-fetcher:
    build:
      context: ./email-fetcher
      dockerfile: Dockerfile
    container_name: mailbox-fetcher
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: 8000
      POSTGRES_HOST: postgres
      POSTGRES_DB: mailbox_db
      POSTGRES_USER: mailbox_user
      POSTGRES_PASSWORD: mailbox_pass
      MAILPIT_HOST: mailpit
      MAILPIT_PORT: 8025
      FETCH_LIMIT: 10000
      MAX_WAIT_TIME: 120
      MIN_MESSAGES: 1000  # Wait for at least this many messages in MailPit before fetching
    depends_on:
      - backend
      - postgres
      - mailpit
      - email-seeder
    networks:
      - mailbox-network
    restart: "no"  # Run once on startup

  # Email Analyzer - Processes emails sequentially with analysis and enrichment
  email-analyzer:
    build:
      context: ./email-analyzer
      dockerfile: Dockerfile
    container_name: mailbox-analyzer
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: 8000
      BATCH_SIZE: 100          # Number of emails to process per batch
      PROCESS_DELAY: 2         # Delay between emails (seconds)
      CONTINUOUS_MODE: "true"  # Set to "true" for continuous processing
      LOOP_DELAY: 120          # Delay between batches in continuous mode (seconds)
    depends_on:
      - backend
      - postgres
    networks:
      - mailbox-network
    restart: unless-stopped  # Change to "unless-stopped" for continuous mode

  # ML Model Services - Phishing Detection Models
  # Commented out non-performing models (0% precision/recall/F1):
  # model-logistic-regression:
  #   build:
  #     context: ./model-logistic-regression
  #     dockerfile: Dockerfile
  #   container_name: model-logistic-regression
  #   ports:
  #     - "8001:8001"
  #   networks:
  #     - mailbox-network
  #   restart: unless-stopped

  model-naive-bayes:
    build:
      context: ./model-naive-bayes
      dockerfile: Dockerfile
    container_name: model-naive-bayes
    ports:
      - "8002:8002"
    networks:
      - mailbox-network
    restart: unless-stopped

  # model-neural-network:
  #   build:
  #     context: ./model-neural-network
  #     dockerfile: Dockerfile
  #   container_name: model-neural-network
  #   ports:
  #     - "8003:8003"
  #   networks:
  #     - mailbox-network
  #   restart: unless-stopped

  model-random-forest:
    build:
      context: ./model-random-forest
      dockerfile: Dockerfile
    container_name: model-random-forest
    ports:
      - "8004:8004"
    networks:
      - mailbox-network
    restart: unless-stopped

  # model-svm:
  #   build:
  #     context: ./model-svm
  #     dockerfile: Dockerfile
  #   container_name: model-svm
  #   ports:
  #     - "8005:8005"
  #   networks:
  #     - mailbox-network
  #   restart: unless-stopped

  model-fine-tuned-llm:
    build:
      context: ./model-fine-tuned-llm
      dockerfile: Dockerfile
    container_name: model-fine-tuned-llm
    ports:
      - "8006:8006"
    volumes:
      - ./model-fine-tuned-llm/models:/app/models
    networks:
      - mailbox-network
    restart: unless-stopped

  # Employee Directory API - Swiss Bank HR System
  employee-directory:
    build:
      context: ./employee-directory
      dockerfile: Dockerfile
    container_name: employee-directory
    ports:
      - "8100:8100"
    volumes:
      - employee_directory_data:/app/data
    networks:
      - mailbox-network
    depends_on:
      - backend
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3


networks:
  mailbox-network:
    driver: bridge

volumes:
  postgres_data:
  mailpit_data:
  ollama_data:
  otterwiki_data:
  employee_directory_data:
  chroma_data:

